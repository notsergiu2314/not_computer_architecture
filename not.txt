//Aveti de implementat NOT [BB+XA+depls]

module control_unit(
    input clk,
    input rst,
    input [15:0] ir,
    input [4:0] flags,
    output reg t1_oe, 
    output reg t1_we,
    output reg t2_oe, 
    output reg t2_we,
    output reg regs_oe,
    output reg regs_we,
    output reg [2:0] regs_addr,
    output reg alu_carry,
    output reg [3:0] alu_opcode,
    output reg alu_oe,
    output reg ram_we, 
    output reg ram_oe,
    output reg ma_oe, 
    output reg ma_we,
    output reg pc_oe, 
    output reg pc_we,
    output wire load_done, 
    output wire exec_done,
    output wire store_done,
    output reg flags_we
);

// Define further states here (if needed)
localparam INIT = 0;
localparam LOAD_DONE = 1;
localparam EXEC_DONE = 2;
localparam STORE_DONE = 3;
localparam LOAD = 4;
localparam EXEC = 30;
localparam STORE = 50;

assign load_done = state == LOAD_DONE;
assign exec_done = state == EXEC_DONE;
assign store_done = state == STORE_DONE;

reg [7:0] state, next_state;

always @(posedge clk) begin
    if(!rst) state = INIT;
    else state <= next_state;
end

localparam XA = 3'b100;
localparam XB = 3'b101;
localparam BA = 3'b110;
localparam BB = 3'b111;

localparam ADC = 4'b0000;
localparam SBB1 = 4'b0001;
localparam SBB2 = 4'b0010;
localparam NOT = 4'b0011;
localparam AND = 4'b0100;
localparam OR = 4'b0101;
localparam XOR = 4'b0110;
localparam SHL = 4'b0111;
localparam SHR = 4'b1000;
localparam SAR = 4'b1001;

wire d;
wire [0:1] mod;
wire [0:2] rg, rm;
wire [0:6] opc;
wire [15:0] ir_rev;

//generate for (genvar i = 0; i < 16; i = i + 1)
//    assign ir_rev[i] = ir[15 - i];
//endgenerate

assign ir_rev = {ir[0], ir[1], ir[2], ir[3], ir[4], ir[5], ir[6], ir[7], 
                 ir[8], ir[9], ir[10], ir[11], ir[12], ir[13], ir[14], ir[15]};

assign {opc, d, mod, rg, rm} = ir_rev;

always @(*) begin
    next_state = state + 1;
    t1_oe = 0;
    t1_we = 0;
    t2_oe = 0;
    t2_we = 0;
    regs_oe = 0;
    regs_we = 0;
    regs_addr = 0;
    alu_carry = 0;
    alu_opcode = 0;
    ram_we = 0;
    ram_oe = 0;
    ma_oe = 0;
    ma_we = 0;
    pc_oe = 0;
    pc_we = 0;
    flags_we = 0;

    case(state)
    INIT: next_state = LOAD;
    LOAD_DONE: next_state = EXEC;
    EXEC_DONE: next_state = STORE;
    STORE_DONE: next_state = STORE_DONE;
    // TODO define LOAD, EXEC, STORE here
    LOAD: begin
        t1_we = 1;
        regs_addr = (rm[1]) ? BB : BA;
        regs_oe = 1;
    end

    LOAD + 1: begin
        t2_we = 1;
        regs_addr = (rm[2]) ? XB : XA;
        regs_oe = 1;
    end

    LOAD + 2: begin
        t1_oe = 1;
        t2_oe = 1;
        alu_opcode = ADC;
        alu_carry = 0;
        alu_oe = 1;
        t1_we = 1;
    end

    LOAD + 3: begin
        t2_we = 1;
        pc_oe = 1;
    end

    LOAD + 4: begin
        t2_oe = 1;
        alu_opcode = ADC;
        alu_carry = 1;
        alu_oe = 1;
        pc_we = 1;
        ma_we = 1;
    end

    LOAD + 5: begin
        ma_oe = 1;
    end

    LOAD + 6: begin
        ram_oe = 1;
        t2_we = 1;
    end

    LOAD + 7: begin
        t1_oe = 1;
        t2_oe = 1;
        alu_opcode = ADC;
        alu_carry = 0;
        alu_oe = 1;
        ma_we = 1;
    end

    LOAD + 8: begin
        ma_oe = 1;
    end

    LOAD + 9: begin
        t1_we = 1;
        ram_oe = 1;
        next_state = LOAD_DONE;
    end

    EXEC: begin
        t1_oe = 1;
        alu_opcode = NOT;
        alu_oe = 1;
        t1_we = 1;
        next_state = EXEC_DONE;
    end

    STORE: begin
        ma_oe = 1;
        ram_we = 1;
        t1_oe = 1;
        alu_opcode = OR;
        alu_oe = 1;
        next_state = STORE_DONE;
    end


    default: next_state = INIT;
    endcase
end

endmodule